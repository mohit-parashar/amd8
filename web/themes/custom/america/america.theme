<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Symfony\Component\HttpFoundation\RedirectResponse;
// BSD controllor
use \Drupal\am_bsd_tools\Controller\amBSDToolsController;

function america_preprocess_page(&$variables) {
      // Show email in message on login popup form, If user already registered
      // with same email address And try to login with social network.
      if(isset($_SESSION['social_login_social_data'])) {
        $user_data = unserialize($_SESSION['social_login_social_data']);
        $email = $user_data['response']['result']['data']['user']['identity']['emails'][0]['value'];
        $first_name = $user_data['response']['result']['data']['user']['identity']['name']['givenName'];
        $last_name = $user_data['response']['result']['data']['user']['identity']['name']['familyName'];
        $variables['#attached']['drupalSettings']['paywall']['oneallemail'] = $email;        
      }

      $is_mobile = checkmobile();
      //$variables['is_mobile'] = $is_mobile;
      $variables['is_mobile'] = FALSE;
      $variables['logopath'] = '/' . drupal_get_path('theme','america') . '/logoWithTagline.png';
      $variables['smlogopath'] = '/' . drupal_get_path('theme','america') . '/logoA.png';
      $current_path = \Drupal::service('path.current')->getPath();
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

      $current_user = \Drupal::currentUser();
      $currentUID = $current_user->id();
      if (($currentUID > 0) && ($current_path == '/user' || $current_path == '/user/'.$currentUID)) {
        $response = new RedirectResponse('/user/'.$currentUID.'/edit');
        $response->send();
        exit;
      }

      // Redirect to home page and trigger bootstrap modle when user come from social media.
      if ($current_path == '/user/register') {
        $response = new RedirectResponse('/?cl=1');
        $response->send();
        exit;
      }

      // Redirect to home page
      if ($current_path == '/registration') {
        $response = new RedirectResponse(\Drupal::url('<front>'));
        $response->send();
        exit;
      }

      if ($node = \Drupal::routeMatch()->getParameter('node')) {
        if($node->body){
          $body = $node->body->getValue();

          if(isset($body[0]['value'])) {
            $str = preg_replace('/\[view(.*?)\]/', '', $body[0]['value']);
            $variables['kindleNodeBody'] = $str;
          }
        }
        $content_type = $node->bundle();

      }

    //Anonymous or authenticated
    if($user->isAnonymous()){
      if (($current_path == '/user/login') || ($current_path == '/user')) {
        $response = new RedirectResponse(\Drupal::url('<front>'));
        $response->send();
        exit;
      }
      if (($current_path == '/user/password')) {

        $response = new RedirectResponse(\Drupal::url('<front>'));
        $response->send();
        exit;
      }

    }else{
      // User is authenticated.
       $uid= $user->get('uid')->value;
       $path = \Drupal::service('path.current')->getPath();
       $path_args = explode('/', $path);
       if ((isset($path_args[1]) && isset($path_args[3])) && ($path_args[1] == 'user' && $path_args[3]== 'simplenews')) {
        $response = new RedirectResponse('/user/'.$uid.'/edit');
        $response->send();
        exit;
      }
    }
    
    $variables['appeals_mode'] = theme_get_setting('appeals_mode','america');
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function america_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
  if (isset($_GET['kindle'])) {
     $suggestions[] = 'page__kindle';
  }
}
/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function america_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Helper function to get text with word boundries.
 */
function truncate($text, $length) {
   $length = abs((int)$length);
   if(strlen($text) > $length) {
      $text = preg_replace("/^(.{1,$length})(\s.*|$)/s", '\\1', $text);
   }
   return($text);
}

/**
 * Implements hook_preprocess_comment
 */
function america_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];
  $variables['trim_comment'] = truncate($variables['comment']->comment_body->value, 1000);
  $variables['trim_last_comment'] = substr($variables['comment']->comment_body->value, strlen($variables['trim_comment']));
  // Getting the node creation time stamp from the comment object.
  $date = $variables['comment']->getCreatedTime();
  // Here you can use drupal's format_date() function, or some custom php date formatting.
  $variables['created'] = \Drupal::service('date.formatter')->formatInterval(REQUEST_TIME - $date);
  $variables['submitted'] = $variables['created'] . ' ago';

  $variables['author_id'] = $comment->getOwnerId();
  $user = \Drupal\user\Entity\User::load($variables['author_id']);
  $first_name = $user->get('field_first_name')->value;
  $last_name = $user->get('field_last_name')->value;
  $mail = $user->get('mail')->value;

  $current_user_roles = \Drupal::currentUser()->getRoles();

  $variables['is_comments_manager'] = FALSE;
  if (in_array('administrator', $current_user_roles) || in_array('comments_manager', $current_user_roles)) {
    $variables['is_comments_manager'] = TRUE;
  }

  if(!$first_name=='' && !$last_name==''){
    $variables['author'] = $first_name.' '.$last_name;
  }else{
    $variables['author'] = $mail;
  }

}


function america_preprocess_field(&$variables){

    if ($node = \Drupal::routeMatch()->getParameter('node')) {
	    //** AN@14Sep@CreateVariableForGetCommentStatus 
		if($node->comment){
		    $commentstatus = $node->comment->getValue();
			if(isset($commentstatus[0]['status'])) {
				   $CommentCurrentStatus = $commentstatus[0]['status'];
				   $variables['CommentCurrentStatus'] = $CommentCurrentStatus;
				}
		}
	}

  $element = $variables['element'];
  if ($element['#field_type'] == 'comment') {
    // Load the current user.
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

    //Anonymous or authenticated
    if($user->isAnonymous()){
      $variables['current_user_state'] = 0;
    }else{
      $variables['current_user_state'] = 1;
    }

    $first_name = $user->get('field_first_name')->value;
    $last_name = $user->get('field_last_name')->value;

    $no_name = 0;

    if($first_name=="" && $last_name==""){
      $no_name = 1;
      $host = \Drupal::request()->getSchemeAndHttpHost();
      $uid= $user->get('uid')->value;
      $user_account_link =  $host.'/user/'.$uid.'/edit';
      $user_login_link =  $host.'/user/login';
      // $variables['message'] = "Before commenting, please visit.";
      $variables['user_account_link'] = $user_account_link;
      $variables['user_login_link'] = $user_login_link;
      $variables['no_name'] = $no_name;
      $variables['uid'] = $uid;
    }else{
      $variables['current_user'] = $first_name.' '.$last_name;
    }
  }
}

function america_preprocess_html(&$vars) {

  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  $pns = \Drupal::request()->query->get('pns');
 
  if ($pns == 'msg') {
    drupal_set_message(t('<div class="AMloginMsg"><div class="titleKarlaBold">Please enter your subscription number below</div></div>'), 'status', FALSE);
  }
  // Kindle main section list page
  if(isset($path_args[1]) && isset($path_args[2])) {
    if($path_args[1] == 'kindle' && $path_args[2] == 'title-manifest.xml') {
        $val = render($vars['page']);
        $manifestPage = preg_replace('/\<[\/]{0,1}div[^\>]*\>/i', '', $val);
        echo '<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>America Magazine</title>'.$manifestPage.'</channel></rss>';die;
    }
  }

  // User accout link
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $uid= $user->get('uid')->value;
  $vars['page'] = str_replace('My','hi',$vars['page']);

  if (isset($_GET['kindle'])) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if($node){
      if($node->body) {
        $nodeSummary = $node->body->getValue();
        $vars['node_summary'] = $nodeSummary[0]['summary'];
      }
      $vars['node_title'] = $node->getTitle();
      if($node->field_by_author) {
        $by_author = $node->field_by_author->referencedEntities();
      }
      if($by_author[0] != '') {
        $vars['node_author'] = $by_author[0]->getTitle();
      }
      if($node->field_issue) {
        $issue = $node->field_issue->referencedEntities();
      }
      if($issue[0] != '') {
        $issue_date = $issue[0]->field_iss_date->getValue();
        $vars['america_date'] = date("Ymd", strtotime($issue_date[0]['value']));
      }
    } else {
      $vars['node_title'] = 'Manifest';
    }

  }

  if($path_args[2]){
    if($path_args[2] == 'CoverImage'){
        $vars['node_title'] = 'Cover';
    }
  }

  if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'user') && ($path_args[2] == 'reset') && (is_numeric($path_args[3]))) {
    $vars['attributes']['class'][] = 'am-password-reset';
  }
  if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'user') && ($path_args[3] == 'edit') && (is_numeric($path_args[2]))) {
    $vars['attributes']['class'][] = 'am-profile-edit-page';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function america_theme_suggestions_html_alter(array &$suggestions, array $variables) {
  if (isset($_GET['kindle'])) {
    $suggestions[] = 'html__kindle';
  }
}

function america_preprocess_views_view_unformatted(&$variables){
    global $base_url;
    $variables['base_url'] = $base_url;
    $current_user = \Drupal::currentUser();
    $currentUID = $current_user->id();
    if ($currentUID > 0) {
        $block = \Drupal\block\Entity\Block::load('searchpagesubscribeblockloggedin');
        if ($block) {
          $variables['search_page_block_output'] = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        }
    } else {
        $block = \Drupal\block\Entity\Block::load('simplenewssubscription_6');
        if ($block) {
          $variables['search_page_block_output'] = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        }
    }

}

function america_preprocess_region(&$variables){
  // Retrieve an array which contains the path pieces.
$current_path = \Drupal::service('path.current')->getPath();
$path_args = explode('/', $current_path);
  if ($path_args[1] == 'kindle') {
     $variables['page_title'] = 'Manifest';
  }
}

function america_preprocess_views_view(&$variables){
$current_path = \Drupal::service('path.current')->getPath();
$path_args = explode('/', $current_path);
  if ($path_args[1] == 'kindle') {
     $variables['page_title'] = 'Manifest';
  }
}

function america_preprocess_views_exposed_form(&$variables){
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  $variables['isFeaturedActiveClass'] = '';
  $variables['sortOrderActiveClass'] = '';
  $variables['mostRecentActiveClass'] = '';
  $variables['mostReleventActiveClass'] = '';
  $variables['our_voice_page'] = '';
  $variables['magazine'] = '';
  $variables['search_page'] = '';

  //if(strpos($current_path,'search') !== false) {
    if(isset($_GET['field_start_date']) && $_GET['field_start_date'] != '') {
        $variables['startDate'] = date("M d, Y", strtotime($_GET['field_start_date']));
    } else {
        $variables['startDate'] = 'Jan 01, 1900';
    }
    if(isset($_GET['field_end_date']) && $_GET['field_end_date'] != '') {
      $variables['endDate']   = date("M d, Y", strtotime($_GET['field_end_date']));
    } else {
      //$variables['endDate'] = date("M d, Y");
      $variables['endDate'] = 'End Date';
    }
  //}

  if(strpos($current_path,'voices') !== false) {
     $variables['our_voice_page'] = 'our-voices';
     if (isset($_GET['sort_by']) && $_GET['sort_order'] == 'ASC') {
       $variables['sortOrderActiveClass'] = 'active';

    }else {
       $variables['isFeaturedActiveClass'] = 'active';
    }
  }

  if(strpos($current_path,'magazine') !== false) {
    $variables['magazine'] = 'magazine';
  }

  if(strpos($current_path,'search') !== false) {
    $variables['search_page'] = 'Search page';
      if (isset($_GET['sort_by']) && $_GET['sort_by'] == 'field_publication_date') {
        $variables['mostRecentActiveClass'] = 'active';
      }else {
         $variables['mostReleventActiveClass'] = 'active';
      }
  }
}
function america_preprocess_page_title(&$variables) {

 $request = \Drupal::request();
 if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
    // Set the page title
    if($title != '' && is_string($title)) {
      $variables['title'] = strip_tags($title);
    }
  }

  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);

  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $mail= $user->get('mail')->value;

  if ($path_args[1]=='user' && $path_args[3]=='edit') {
    $variables['title'] = strip_tags($mail);
  }

}

/**
 * Implement hook_theme()
 */
function america_theme($existing, $type, $theme, $path) {
  return array(
    'user_form' => array(
      'render element' => 'form',
      'template' => 'form/form--user-form',
    ),
    'am_newsletter_update_form' => array(
      'render element' => 'form',
      'template' => 'am-newsletter-update-form',
    ),
  );
}

function checkmobile() {
  // if no user agent is set
  if (!isset($_SERVER['HTTP_USER_AGENT'])) {
    $is_mobile = FALSE;
  } else {
    /**
     *  check http://detectmobilebrowsers.com for updates
     */
    $is_mobile = (preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i',$_SERVER['HTTP_USER_AGENT'])||preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i',substr($_SERVER['HTTP_USER_AGENT'],0,4))) ? TRUE : FALSE;
  }
  return $is_mobile;
}

/**
 * Implement hook_preprocess_node()
 */
function america_preprocess_node(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
       $type = $node->getType();
       if ($type == 'subscription_offer') {
          if($node->field_image->entity) {
            $variables['is_image_exist'] = TRUE;
          } else {
            $variables['is_image_exist'] = FALSE;
          }
       }
  }
}
